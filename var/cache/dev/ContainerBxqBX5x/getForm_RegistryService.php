<?php

namespace ContainerBxqBX5x;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getForm_RegistryService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormRegistryInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormRegistry.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'FormExtensionInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'Extension'.\DIRECTORY_SEPARATOR.'DependencyInjection'.\DIRECTORY_SEPARATOR.'DependencyInjectionExtension.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'ResolvedFormTypeFactoryInterface.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'Extension'.\DIRECTORY_SEPARATOR.'DataCollector'.\DIRECTORY_SEPARATOR.'Proxy'.\DIRECTORY_SEPARATOR.'ResolvedTypeFactoryDataCollectorProxy.php';
        include_once \dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'form'.\DIRECTORY_SEPARATOR.'ResolvedFormTypeFactory.php';

        return $container->privates['form.registry'] = new \Symfony\Component\Form\FormRegistry([0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Form\\AcademieType' => ['privates', 'App\\Form\\AcademieType', 'getAcademieTypeService', true],
            'App\\Form\\Aliment1Type' => ['privates', 'App\\Form\\Aliment1Type', 'getAliment1TypeService', true],
            'App\\Form\\CategorieLocationType' => ['privates', 'App\\Form\\CategorieLocationType', 'getCategorieLocationTypeService', true],
            'App\\Form\\CategorieProduitType' => ['privates', 'App\\Form\\CategorieProduitType', 'getCategorieProduitTypeService', true],
            'App\\Form\\ChangePasswordFormType' => ['privates', 'App\\Form\\ChangePasswordFormType', 'getChangePasswordFormTypeService', true],
            'App\\Form\\ClientType' => ['privates', 'App\\Form\\ClientType', 'getClientTypeService', true],
            'App\\Form\\CoachType' => ['privates', 'App\\Form\\CoachType', 'getCoachTypeService', true],
            'App\\Form\\CommandeType' => ['privates', 'App\\Form\\CommandeType', 'getCommandeTypeService', true],
            'App\\Form\\CoursType' => ['privates', 'App\\Form\\CoursType', 'getCoursTypeService', true],
            'App\\Form\\EspaceType' => ['privates', 'App\\Form\\EspaceType', 'getEspaceTypeService', true],
            'App\\Form\\EvenementType' => ['privates', 'App\\Form\\EvenementType', 'getEvenementTypeService', true],
            'App\\Form\\ExerciceType' => ['privates', 'App\\Form\\ExerciceType', 'getExerciceTypeService', true],
            'App\\Form\\Objectif1Type' => ['privates', 'App\\Form\\Objectif1Type', 'getObjectif1TypeService', true],
            'App\\Form\\ObjectifFront' => ['privates', 'App\\Form\\ObjectifFront', 'getObjectifFrontService', true],
            'App\\Form\\ProduitType' => ['privates', 'App\\Form\\ProduitType', 'getProduitTypeService', true],
            'App\\Form\\RegistrationClientFormType' => ['privates', 'App\\Form\\RegistrationClientFormType', 'getRegistrationClientFormTypeService', true],
            'App\\Form\\RegistrationCoachFormType' => ['privates', 'App\\Form\\RegistrationCoachFormType', 'getRegistrationCoachFormTypeService', true],
            'App\\Form\\RegistrationFormType' => ['privates', 'App\\Form\\RegistrationFormType', 'getRegistrationFormTypeService', true],
            'App\\Form\\ResetPasswordRequestFormType' => ['privates', 'App\\Form\\ResetPasswordRequestFormType', 'getResetPasswordRequestFormTypeService', true],
            'App\\Form\\Routine1Type' => ['privates', 'App\\Form\\Routine1Type', 'getRoutine1TypeService', true],
            'App\\Form\\RoutineFront' => ['privates', 'App\\Form\\RoutineFront', 'getRoutineFrontService', true],
            'App\\Form\\SalleType' => ['privates', 'App\\Form\\SalleType', 'getSalleTypeService', true],
            'Karser\\Recaptcha3Bundle\\Form\\Recaptcha3Type' => ['privates', 'karser_recaptcha3.form.type', 'getKarserRecaptcha3_Form_TypeService', true],
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => ['privates', 'form.type.entity', 'getForm_Type_EntityService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => ['privates', 'form.type.choice', 'getForm_Type_ChoiceService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => ['privates', 'form.type.color', 'getForm_Type_ColorService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => ['services', '.container.private.form.type.file', 'get_Container_Private_Form_Type_FileService', true],
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => ['privates', 'form.type.form', 'getForm_Type_FormService', true],
        ], [
            'App\\Form\\AcademieType' => '?',
            'App\\Form\\Aliment1Type' => '?',
            'App\\Form\\CategorieLocationType' => '?',
            'App\\Form\\CategorieProduitType' => '?',
            'App\\Form\\ChangePasswordFormType' => '?',
            'App\\Form\\ClientType' => '?',
            'App\\Form\\CoachType' => '?',
            'App\\Form\\CommandeType' => '?',
            'App\\Form\\CoursType' => '?',
            'App\\Form\\EspaceType' => '?',
            'App\\Form\\EvenementType' => '?',
            'App\\Form\\ExerciceType' => '?',
            'App\\Form\\Objectif1Type' => '?',
            'App\\Form\\ObjectifFront' => '?',
            'App\\Form\\ProduitType' => '?',
            'App\\Form\\RegistrationClientFormType' => '?',
            'App\\Form\\RegistrationCoachFormType' => '?',
            'App\\Form\\RegistrationFormType' => '?',
            'App\\Form\\ResetPasswordRequestFormType' => '?',
            'App\\Form\\Routine1Type' => '?',
            'App\\Form\\RoutineFront' => '?',
            'App\\Form\\SalleType' => '?',
            'Karser\\Recaptcha3Bundle\\Form\\Recaptcha3Type' => '?',
            'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\ColorType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType' => '?',
            'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => '?',
        ]), ['Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.form.transformation_failure_handling'] ?? $container->load('getForm_TypeExtension_Form_TransformationFailureHandlingService'));
            yield 1 => ($container->privates['form.type_extension.form.http_foundation'] ?? $container->load('getForm_TypeExtension_Form_HttpFoundationService'));
            yield 2 => ($container->privates['form.type_extension.form.validator'] ?? $container->load('getForm_TypeExtension_Form_ValidatorService'));
            yield 3 => ($container->privates['form.type_extension.upload.validator'] ?? $container->load('getForm_TypeExtension_Upload_ValidatorService'));
            yield 4 => ($container->privates['form.type_extension.csrf'] ?? $container->load('getForm_TypeExtension_CsrfService'));
            yield 5 => ($container->privates['form.type_extension.form.data_collector'] ?? $container->load('getForm_TypeExtension_Form_DataCollectorService'));
        }, 6), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.repeated.validator'] ?? ($container->privates['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()));
        }, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_extension.submit.validator'] ?? ($container->privates['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()));
        }, 1)], new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['form.type_guesser.validator'] ?? $container->load('getForm_TypeGuesser_ValidatorService'));
            yield 1 => ($container->privates['form.type_guesser.doctrine'] ?? $container->load('getForm_TypeGuesser_DoctrineService'));
        }, 2))], new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ($container->privates['data_collector.form'] ?? $container->getDataCollector_FormService())));
    }
}
